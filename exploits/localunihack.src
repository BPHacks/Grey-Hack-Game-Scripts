DeleteFile = function(computer, filepath)
	file = computer.File(filepath)
	if not file then
		print("unable to open file")
		return null
	end if
	
	file.delete
end function

if params.len != 1 and params.len != 3 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: exploit [path/to/lib.so] [memory] [value]</b>")
metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then
	currentPath = get_shell.host_computer.current_path
	metaxploit = include_lib(currentPath + "/metaxploit.so")
end if
if not metaxploit then exit("Error: Can't find metaxploit library in the /lib path or the current folder")

if params.len == 1 then
	validLibs = {"kernel":"/lib/kernel_module.so", "net":"/lib/net.so", "sql":"/lib/libsql.so", "http":"/lib/libhttp.so"}
	if not validLibs[params[0]] then exit("invalid lib, valid libs: net, sql, http")
	metaLib = metaxploit.load( validLibs[params[0]] )
else
	metaLib = metaxploit.load( params[0] )
end if
if not metaLib then exit("Error: can't load lib")

if params.len == 3 then
	result = metaLib.overflow(params[1], params[2])
else
	exploits = {"kernel":"0xA410A48:lock_sizedelc", "net":"0x46EFBD3E:atapowbuttonb", "sql":"0x15BE5A18:updatetelinenum++", "http":"0x12BF69FD:ringcoundo"}
	if not exploits[params[0]] then exit("invalid lib, supply manual value")
	exploitValues = exploits[params[0]].split(":")
	result = metaLib.overflow(exploitValues[0], exploitValues[1])
end if
if not result then exit("Overflow failed")

if typeof(result) == "shell" then
	print("Got shell object, attempting to start...")
	result.start_terminal
else if typeof(result) == "computer" then
	print("Got computer object, attempting to print /etc/passwd") 
	passwd = result.File("/etc/passwd")
	if passwd != null and passwd.has_permission("r") then
		print(passwd.content)
		host = result
	else
		print("unable to print passwd file: access denied")
	end if

else if typeof(result) == "file" then
	if not result.has_permission("r") then exit ("Got file or folder " + result.path + " but unable to read, permission denied")
	if result.is_folder then
		print("Got folder, attempting to move to /")
		while result.path != "/"
			result = result.parent
		//	print(result.path)
		end while
		print("Arrived at /, attempting to move to /etc to get passwd file...")
		folders = result.get_folders
		for folder in folders
			if folder.path == "/etc" then
					files = folder.get_files
					for file in files
						if file.name == "passwd" then
							if not file.has_permission("r") then exit("Unable to read /etc/passwd. Permission denied.")
							exit("Success, printing contents of /etc/passwd:\n" + file.content)
						end if
					end for
			end if
		end for
	else if result.is_binary then
		print("Got binary file: " + result.path)
	else
		print("Got file: " + result.path + ", printing contents now")
		print(result.content)
	end if
else
	print("Error: expected shell, computer, folder, or file, obtained: " + result)
end if
