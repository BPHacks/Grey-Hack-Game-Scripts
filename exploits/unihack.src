nmap = function(address)
	if not is_valid_ip(address) then exit("nmap: invalid ip address")
	if not get_shell.host_computer.is_network_active then exit("nmap: can't connect. No internet access.")
	
	ipAddress = address
	isLanIp = is_lan_ip( ipAddress )
	
	if isLanIp then
		router = get_router;
	else 
		router = get_router( ipAddress )
	end if
	
	if router == null then exit("nmap: ip address not found")
	
	isRouterIp = ipAddress[ipAddress.len - 1] == 1
	ports = null
	
	if not isLanIp or isRouterIp then
		ports = router.used_ports
	else
		ports = router.computer_ports(ipAddress)
	end if
	
	if ports == null then exit("nmap: ip address not found")
	
	info = "PORT STATE SERVICE VERSION LAN"   
	print("\nStarting integrated nmap v1.1 at " + current_date)
	print("Interesting ports on " + params[0] + "\n")
	
	for port in ports
		service_info = router.port_info(port)
		lan_ips = port.get_lan_ip
		port_status = "open"
		
		if(port.is_closed and not isLanIp) then
			port_status = "closed"
		end if
		info = info + "\n" + port.port_number + " " + port_status + " " + service_info + " " + lan_ips
	end for
	print(format_columns(info) + "\n")
	exit
end function

get_passwd_and_bank = function(computer)
	passwd = computer.File("/etc/passwd")
	if passwd != null and passwd.has_permission("r") then
		print("***** BEGIN contents of /etc/passwd *****")
		print(passwd.content)
		print("***** END contents of /etc/passwd *****")
	else
		print("/etc/passwd: doesn't exist or permission denied, unable to print contents")
	end if
	
	homeFolder = computer.File("/home")
	if not homeFolder then exit("Error: /home folder not found")
	userFolders = homeFolder.get_folders
	found = false
	bankUsers = []
	for userFolder in userFolders
		bankFile = computer.File("/home/" + userFolder.name + "/Config/Bank.txt")
		if not bankFile then continue
		if not bankFile.has_permission("r") then 
			print("Error: can't read file contents. Permission denied")
			return
		end if
		bankUsers.push(bankFile.content)
	end for
	
	if bankUsers.len == 0 then 
		print("No bank accounts found, skipping creation of account file")
		return
	end if
	
	host = get_shell.host_computer
	bankFileName = "bank_" + params[0] + ".txt"
	print("attempting to create " + bankFileName)
	if host.touch(home_dir, bankFileName) then
		bankFile = host.File(home_dir + "/" + bankFileName)
		bankFile.set_content("")
		for user in bankUsers
			bankFile.set_content(bankFile.content + user + "\n")
		end for
	else
		print("unable to create " + bankFileName)
	end if
end function

if params.len != 1 and params.len != 2 and params.len != 4 or params[0] == "-h" or params[0] == "--help" then exit("Got " + params.len + "args, expected 2 or 4\n<b>Usage: exploit [ip_address] [port] [memory] [value]</b>")

if params.len == 1 then
	nmap(params[0])
end if

metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then
	currentPath = get_shell.host_computer.current_path
	metaxploit = include_lib(currentPath + "/metaxploit.so")
end if
if not metaxploit then exit("Error: Can't find metaxploit library in the /lib path or the current folder")
address = params[0]

port = params[1].to_int
net_session = metaxploit.net_use( address, port )
if not net_session then exit("Error: can't connect to net session")
metaLib = net_session.dump_libs
//result = metaLib.overflow(params[2], params[3], "ayylmao")
if params.len == 2 then
	// Format: memory-loc:value:Description of what it does
	exploits = { 21:"0x2C822F08:file:Grants user-access shell", 22:"0x5DDAD8B2:tflushp:Attempts to print contents of /etc/passwd" }
	
	if not exploits.hasIndex(port) then //exit("Invalid port")
		print("Invalid port for auto-sploit, printing known good ports that have exploits:")
		for index in exploits.indexes
			portInfo = exploits[index].split(":")
			print(index + ": " + portInfo[2])
		end for
		exit
	end if
	
	exploitValues = exploits[port].split(":")
	result = metaLib.overflow(exploitValues[0], exploitValues[1])
else
	result = metaLib.overflow(params[2], params[3])
end if

if not result then exit("Program ended")
if typeof(result) == "shell" then
	print("Got shell object, will attempt to print /etc/passwd & exfiltrate bank info before starting shell")
	get_passwd_and_bank(result.host_computer)
	print("Starting shell...")
	result.start_terminal
else if typeof(result) == "computer" then
	print("Got computer object, will attempt to print /etc/passwd & exfiltrate bank info from it")
	get_passwd_and_bank(result)
else if typeof(result) == "file" then
	if not result.has_permission("r") then exit ("Got file or folder " + result.path + " but unable to read, permission denied")
	if result.is_folder then
		print("Got folder, attempting to move to /")
		while result.path != "/"
			result = result.parent
			//	print(result.path)
			end while
		print("Arrived at /, attempting to move to /etc to get passwd file...")
		folders = result.get_folders
		for folder in folders
			if folder.path == "/etc" then
				files = folder.get_files
				for file in files
					if file.name == "passwd" then
						if not file.has_permission("r") then exit("Unable to read /etc/passwd. Permission denied.")
						exit("Success, printing contents of /etc/passwd:\n" + file.content)
					end if
				end for
			end if
			end for

	else if result.is_binary then
		print("Got binary file: " + result.path)
	else
		print("Got file: " + result.path + ", printing contents now")
		print(result.content)
	end if
else
	print("Error: expected shell or computer, obtained: " + result)
end if
